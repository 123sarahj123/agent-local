package process

import (
	"io"
	"regexp"
)

// This regex matches either newline, or one of the "Erase in Line" escape
// sequences:
// [K Clear from cursor to the end of the line
// [1K Clear from cursor to beginning of the line
// [2K Clear entire line
var lineBreakEscapeRE = regexp.MustCompile(`\n|\x1b\[[012]?K`)

// Prefixer inserts prefixes generated by a callback before each line. To ensure
// any temporarily-buffered data is written out, be sure to call Flush when
// done.
type Prefixer struct {
	w   io.Writer
	f   func() string
	buf []byte
}

// NewPrefixer sets up a Prefixer outputting to an io.Writer w and reading
// prefixes from the callback f.
func NewPrefixer(w io.Writer, f func() string) *Prefixer {
	return &Prefixer{
		w: w,
		f: f,
	}
}

// Flush writes any unwritten data from the internal buffer with a prefix,
// unless there is no unwritten data, in which case Flush does nothing.
func (p *Prefixer) Flush() error {
	if len(p.buf) == 0 {
		return nil
	}
	if _, err := p.w.Write([]byte(p.f())); err != nil {
		return err
	}
	if _, err := p.w.Write(p.buf); err != nil {
		return err
	}
	p.buf = nil
	return nil
}

// Write writes the given data, plus any additional prefixes necessary, to the
// Prefixer's output. Prefixes are computed at each newline or erase-in-line
// escape sequence. Some data may be held back in an internal buffer and written
// in a subsequent call to Write.
func (p *Prefixer) Write(data []byte) (n int, err error) {
	// Add it to the buffer, then process the buffer.
	p.buf = append(p.buf, data...)

	for len(p.buf) > 0 {
		// Find the next newline or line-break escape sequence.
		// FindIndex returns a two-element slice denoting the matched range.
		idx := lineBreakEscapeRE.FindIndex(p.buf)
		if idx == nil {
			return len(data), nil
		}

		// Write the prefix, then the line, then advance the buffer.
		if _, err := p.w.Write([]byte(p.f())); err != nil {
			return 0, err
		}
		if _, err := p.w.Write(p.buf[:idx[1]]); err != nil {
			return 0, err
		}
		p.buf = p.buf[idx[1]:]
	}

	return len(data), nil
}
